diff --git a/Makefile b/Makefile
index 62fd0f8..0da83ea 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/Makefile.rej b/Makefile.rej
new file mode 100644
index 0000000..a5eba4d
--- /dev/null
+++ b/Makefile.rej
@@ -0,0 +1,10 @@
+diff a/Makefile b/Makefile	(rejected hunks)
+@@ -132,6 +132,8 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
++	$U/_threads\
++	$U/_producer_consumer\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..1e6bbaa 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create_helper(uint64, uint64, uint64);
+int             thread_join_helper(int);
+void            thread_freepagetable(pagetable_t, uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +176,9 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
+void            thread_free(pagetable_t, uint64);
+int             copyoutV2(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/defs.h.rej b/kernel/defs.h.rej
new file mode 100644
index 0000000..36eeca4
--- /dev/null
+++ b/kernel/defs.h.rej
@@ -0,0 +1,23 @@
+diff a/kernel/defs.h b/kernel/defs.h	(rejected hunks)
+@@ -106,6 +106,11 @@ void            yield(void);
+ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
++int             thread_create_helper(uint64, uint64, uint64);
++int             thread_join_helper(int);
++void            thread_freepagetable(pagetable_t, uint64);
++void            sleepV2(uint64);
++void            wakeupV2(int);
+ 
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+@@ -173,6 +178,9 @@ uint64          walkaddr(pagetable_t, uint64);
+ int             copyout(pagetable_t, uint64, char *, uint64);
+ int             copyin(pagetable_t, char *, uint64, uint64);
+ int             copyinstr(pagetable_t, char *, uint64, uint64);
++int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
++void            thread_free(pagetable_t, uint64);
++int             copyoutV2(pagetable_t, uint64);
+ 
+ // plic.c
+ void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..233541c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -29,6 +29,10 @@ struct spinlock wait_lock;
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
+
+//Array of memory locks
+struct spinlock memoryLocks[NPROC];
+
 void
 proc_mapstacks(pagetable_t kpgtbl)
 {
@@ -48,13 +52,18 @@ void
 procinit(void)
 {
   struct proc *p;
+  int i;
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
-  for(p = proc; p < &proc[NPROC]; p++) {
+  for(i = 0, p = proc; p < &proc[NPROC]; p++, i++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
+
+      //Threading variables
+      p->isThread=0;
+      initlock(&memoryLocks[i], "memory_lock");
   }
 }
 
@@ -110,6 +119,7 @@ static struct proc*
 allocproc(void)
 {
   struct proc *p;
+  int unusedInd = 0;
 
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
@@ -118,6 +128,7 @@ allocproc(void)
     } else {
       release(&p->lock);
     }
+    unusedInd++;
   }
   return 0;
 
@@ -125,6 +136,11 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+  //Threading variables
+  p->isThread = 0;
+  p->memoryId = p->pid;
+  p->memoryLock = &memoryLocks[unusedInd];
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -158,8 +174,18 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+
+  if(p->pagetable){
+    //Freeing Thread
+    if(p->isThread){
+      thread_freepagetable(p->pagetable, p->sz);
+    }
+    //Freeing Process
+    else{
+      proc_freepagetable(p->pagetable, p->sz);
+    }
+  }
+
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +195,11 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+
+  //Threading variables
+  p->isThread = 0;
+  p->memoryId = 0;
+  p->memoryLock = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -262,15 +293,39 @@ growproc(int n)
   uint64 sz;
   struct proc *p = myproc();
 
+  acquire(p->memoryLock);
+
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(p->memoryLock);
       return -1;
     }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+
+  struct proc *ip;
+  for(ip=proc;ip<&proc[NPROC];ip++){
+    if(ip->pid!=p->pid && ip->memoryId==p->memoryId){
+      if(n>=0){
+        uvmmirror(ip->pagetable, p->pagetable, ip->sz, p->sz);
+      }
+      else{
+        uvmunmap(
+          ip->pagetable,
+          p->sz,
+          (PGROUNDUP(ip->sz) - PGROUNDUP(p->sz))/PGSIZE,
+          0
+        );
+      }
+      ip->sz = p->sz;
+    }
+  }
+
+  release(p->memoryLock);
+
   return 0;
 }
 
@@ -686,3 +741,122 @@ procdump(void)
     printf("\n");
   }
 }
+
+//Copy of fork with slight changes
+//uvmmirror instead of uvmcopy
+//Look under threading specific comment
+int
+thread_create_helper(uint64 f, uint64 a, uint64 s){
+
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate thread.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  acquire(p->memoryLock);
+  // Mirror user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    release(p->memoryLock);
+    return -1;
+  }
+  release(p->memoryLock);
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  //Threading Specific
+
+  //Passing argument address
+  np->trapframe->a0 = a;
+  //Setting program counter
+  np->trapframe->epc = f;
+  //Setting stack
+  np->trapframe->sp = s + 4096;
+  np->trapframe->sp -= (np->trapframe->sp)%16;
+  //Threading variables
+  np->isThread = 1;
+  np->memoryId = p->memoryId;
+  np->memoryLock = p->memoryLock;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+//Copy of wait with slight changes
+//Removed copyout
+int
+thread_join_helper(int id){
+
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->pid == id && pp->memoryId == p->memoryId){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+//Copy of proc_freepagetable with slight changes
+void
+thread_freepagetable(pagetable_t pagetable, uint64 sz){
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  thread_free(pagetable, sz);
+}
+
+
diff --git a/kernel/proc.c.rej b/kernel/proc.c.rej
new file mode 100644
index 0000000..90a8f6a
--- /dev/null
+++ b/kernel/proc.c.rej
@@ -0,0 +1,290 @@
+diff a/kernel/proc.c b/kernel/proc.c	(rejected hunks)
+@@ -29,6 +29,10 @@ struct spinlock wait_lock;
+ // Allocate a page for each process's kernel stack.
+ // Map it high in memory, followed by an invalid
+ // guard page.
++
++//Array of memory locks
++struct spinlock memoryLocks[NPROC];
++
+ void
+ proc_mapstacks(pagetable_t kpgtbl)
+ {
+@@ -48,13 +52,18 @@ void
+ procinit(void)
+ {
+   struct proc *p;
++  int i;
+   
+   initlock(&pid_lock, "nextpid");
+   initlock(&wait_lock, "wait_lock");
+-  for(p = proc; p < &proc[NPROC]; p++) {
++  for(i = 0, p = proc; p < &proc[NPROC]; p++, i++) {
+       initlock(&p->lock, "proc");
+       p->state = UNUSED;
+       p->kstack = KSTACK((int) (p - proc));
++
++      //Threading variables
++      p->isThread=0;
++      initlock(&memoryLocks[i], "memory_lock");
+   }
+ }
+ 
+@@ -110,6 +119,7 @@ static struct proc*
+ allocproc(void)
+ {
+   struct proc *p;
++  int unusedInd = 0;
+ 
+   for(p = proc; p < &proc[NPROC]; p++) {
+     acquire(&p->lock);
+@@ -118,6 +128,7 @@ allocproc(void)
+     } else {
+       release(&p->lock);
+     }
++    unusedInd++;
+   }
+   return 0;
+ 
+@@ -125,6 +136,11 @@ found:
+   p->pid = allocpid();
+   p->state = USED;
+ 
++  //Threading variables
++  p->isThread = 0;
++  p->memoryId = p->pid;
++  p->memoryLock = &memoryLocks[unusedInd];
++
+   // Allocate a trapframe page.
+   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+     freeproc(p);
+@@ -158,8 +174,18 @@ freeproc(struct proc *p)
+   if(p->trapframe)
+     kfree((void*)p->trapframe);
+   p->trapframe = 0;
+-  if(p->pagetable)
+-    proc_freepagetable(p->pagetable, p->sz);
++
++  if(p->pagetable){
++    //Freeing Thread
++    if(p->isThread){
++      thread_freepagetable(p->pagetable, p->sz);
++    }
++    //Freeing Process
++    else{
++      proc_freepagetable(p->pagetable, p->sz);
++    }
++  }
++
+   p->pagetable = 0;
+   p->sz = 0;
+   p->pid = 0;
+@@ -169,6 +195,11 @@ freeproc(struct proc *p)
+   p->killed = 0;
+   p->xstate = 0;
+   p->state = UNUSED;
++
++  //Threading variables
++  p->isThread = 0;
++  p->memoryId = 0;
++  p->memoryLock = 0;
+ }
+ 
+ // Create a user page table for a given process, with no user memory,
+@@ -262,15 +293,39 @@ growproc(int n)
+   uint64 sz;
+   struct proc *p = myproc();
+ 
++  acquire(p->memoryLock);
++
+   sz = p->sz;
+   if(n > 0){
+     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
++      release(p->memoryLock);
+       return -1;
+     }
+   } else if(n < 0){
+     sz = uvmdealloc(p->pagetable, sz, sz + n);
+   }
+   p->sz = sz;
++
++  struct proc *ip;
++  for(ip=proc;ip<&proc[NPROC];ip++){
++    if(ip->pid!=p->pid && ip->memoryId==p->memoryId){
++      if(n>=0){
++        uvmmirror(ip->pagetable, p->pagetable, ip->sz, p->sz);
++      }
++      else{
++        uvmunmap(
++          ip->pagetable,
++          p->sz,
++          (PGROUNDUP(ip->sz) - PGROUNDUP(p->sz))/PGSIZE,
++          0
++        );
++      }
++      ip->sz = p->sz;
++    }
++  }
++
++  release(p->memoryLock);
++
+   return 0;
+ }
+ 
+@@ -681,3 +736,155 @@ procdump(void)
+     printf("\n");
+   }
+ }
++
++//Copy of fork with slight changes
++//uvmmirror instead of uvmcopy
++//Look under threading specific comment
++int
++thread_create_helper(uint64 f, uint64 a, uint64 s){
++
++  int i, pid;
++  struct proc *np;
++  struct proc *p = myproc();
++
++  // Allocate thread.
++  if((np = allocproc()) == 0){
++    return -1;
++  }
++
++  acquire(p->memoryLock);
++  // Mirror user memory from parent to child.
++  if(uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0){
++    freeproc(np);
++    release(&np->lock);
++    release(p->memoryLock);
++    return -1;
++  }
++  release(p->memoryLock);
++  np->sz = p->sz;
++
++  // copy saved user registers.
++  *(np->trapframe) = *(p->trapframe);
++
++  //Threading Specific
++
++  //Passing argument address
++  np->trapframe->a0 = a;
++  //Setting program counter
++  np->trapframe->epc = f;
++  //Setting stack
++  np->trapframe->sp = s + 4096;
++  np->trapframe->sp -= (np->trapframe->sp)%16;
++  //Threading variables
++  np->isThread = 1;
++  np->memoryId = p->memoryId;
++  np->memoryLock = p->memoryLock;
++
++  // increment reference counts on open file descriptors.
++  for(i = 0; i < NOFILE; i++)
++    if(p->ofile[i])
++      np->ofile[i] = filedup(p->ofile[i]);
++  np->cwd = idup(p->cwd);
++
++  safestrcpy(np->name, p->name, sizeof(p->name));
++
++  pid = np->pid;
++
++  release(&np->lock);
++
++  acquire(&wait_lock);
++  np->parent = p;
++  release(&wait_lock);
++
++  acquire(&np->lock);
++  np->state = RUNNABLE;
++  release(&np->lock);
++
++  return pid;
++}
++
++//Copy of wait with slight changes
++//Removed copyout
++int
++thread_join_helper(int id){
++
++  struct proc *pp;
++  int havekids, pid;
++  struct proc *p = myproc();
++
++  acquire(&wait_lock);
++
++  for(;;){
++    // Scan through table looking for exited children.
++    havekids = 0;
++    for(pp = proc; pp < &proc[NPROC]; pp++){
++      if(pp->pid == id && pp->memoryId == p->memoryId){
++        // make sure the child isn't still in exit() or swtch().
++        acquire(&pp->lock);
++
++        havekids = 1;
++        if(pp->state == ZOMBIE){
++          // Found one.
++          pid = pp->pid;
++          freeproc(pp);
++          release(&pp->lock);
++          release(&wait_lock);
++          return pid;
++        }
++        release(&pp->lock);
++      }
++    }
++
++    // No point waiting if we don't have any children.
++    if(!havekids || killed(p)){
++      release(&wait_lock);
++      return -1;
++    }
++
++    // Wait for a child to exit.
++    sleep(p, &wait_lock);  //DOC: wait-sleep
++  }
++}
++
++//Copy of proc_freepagetable with slight changes
++void
++thread_freepagetable(pagetable_t pagetable, uint64 sz){
++  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
++  uvmunmap(pagetable, TRAPFRAME, 1, 0);
++  thread_free(pagetable, sz);
++}
++
++//Copy of sleep with changes
++void
++sleepV2(uint64 x){
++
++  struct proc *p = myproc();
++
++  acquire(&p->lock);
++
++  acquire(p->memoryLock);
++  copyoutV2(p->pagetable, x);
++  release(p->memoryLock);
++
++  p->state = SLEEPING;
++  sched();
++
++  release(&p->lock);
++}
++
++//Copy of wakeup with changes
++void
++wakeupV2(int id){
++
++  struct proc *p;
++
++  for(p = proc; p < &proc[NPROC]; p++) {
++    if(p != myproc()){
++      acquire(&p->lock);
++      if(p->state == SLEEPING && p->pid == id) {
++        p->state = RUNNABLE;
++      }
++      release(&p->lock);
++    }
++  }
++}
+\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..8d9e14f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //Threading variables
+  int isThread;
+  int memoryId;
+  struct spinlock *memoryLock;
 };
diff --git a/kernel/proc.h.rej b/kernel/proc.h.rej
new file mode 100644
index 0000000..9e9d2ad
--- /dev/null
+++ b/kernel/proc.h.rej
@@ -0,0 +1,11 @@
+diff a/kernel/proc.h b/kernel/proc.h	(rejected hunks)
+@@ -104,4 +104,9 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++
++  //Threading variables
++  int isThread;
++  int memoryId;
++  struct spinlock *memoryLock;
+ };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6a81db3 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.c.rej b/kernel/syscall.c.rej
new file mode 100644
index 0000000..c510b1b
--- /dev/null
+++ b/kernel/syscall.c.rej
@@ -0,0 +1,25 @@
+diff a/kernel/syscall.c b/kernel/syscall.c	(rejected hunks)
+@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
++extern uint64 sys_thread_create(void);
++extern uint64 sys_thread_join(void);
++extern uint64 sys_thread_exit(void);
++extern uint64 sys_sleepV2(void);
++extern uint64 sys_wakeupV2(void);
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_thread_create]   sys_thread_create,
++[SYS_thread_join]   sys_thread_join,
++[SYS_thread_exit]   sys_thread_exit,
++[SYS_sleepV2]   sys_sleepV2,
++[SYS_wakeupV2]   sys_wakeupV2
+ };
+ 
+ void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9afef21 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
\ No newline at end of file
diff --git a/kernel/syscall.h.rej b/kernel/syscall.h.rej
new file mode 100644
index 0000000..49eec83
--- /dev/null
+++ b/kernel/syscall.h.rej
@@ -0,0 +1,11 @@
+diff a/kernel/syscall.h b/kernel/syscall.h	(rejected hunks)
+@@ -20,3 +20,8 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_thread_create 22
++#define SYS_thread_join 23
++#define SYS_thread_exit 24
++#define SYS_sleepV2 25
++#define SYS_wakeupV2 26
+\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..f5ef60e 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,26 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void){
+  uint64 f, a, s;
+  argaddr(0,&f);
+  argaddr(1,&a);
+  argaddr(2,&s);
+  return thread_create_helper(f, a, s);
+}
+
+uint64
+sys_thread_join(void){
+  int x;
+  argint(0,&x);
+  return thread_join_helper(x);
+}
+
+//Noraml exit(0) is enough
+uint64
+sys_thread_exit(void){
+  exit(0);
+  return 0;
+}
diff --git a/kernel/sysproc.c.rej b/kernel/sysproc.c.rej
new file mode 100644
index 0000000..23abc6c
--- /dev/null
+++ b/kernel/sysproc.c.rej
@@ -0,0 +1,45 @@
+diff a/kernel/sysproc.c b/kernel/sysproc.c	(rejected hunks)
+@@ -89,3 +89,42 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++
++uint64
++sys_thread_create(void){
++  uint64 f, a, s;
++  argaddr(0,&f);
++  argaddr(1,&a);
++  argaddr(2,&s);
++  return thread_create_helper(f, a, s);
++}
++
++uint64
++sys_thread_join(void){
++  int x;
++  argint(0,&x);
++  return thread_join_helper(x);
++}
++
++//Noraml exit(0) is enough
++uint64
++sys_thread_exit(void){
++  exit(0);
++  return 0;
++}
++
++uint64
++sys_sleepV2(void){
++  uint64 x;
++  argaddr(0,&x);
++  sleepV2(x);
++  return 0;
++}
++
++uint64
++sys_wakeupV2(void){
++  int id;
++  argint(0,&id);
++  wakeupV2(id);
++  return 0;
++}
+\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..9a29ba7 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -449,3 +449,52 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+//Copy of uvmcopy with slight changes
+int
+uvmmirror(pagetable_t old, pagetable_t new,uint64 old_sz, uint64 new_sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = PGROUNDUP(old_sz); i < PGROUNDUP(new_sz); i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+//Copy of uvmfree with slight changes
+void thread_free(pagetable_t pagetable, uint64 sz){
+  if(sz > 0) uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
+//Copy of copyout with changes
+int
+copyoutV2(pagetable_t pagetable, uint64 dstva){
+
+  uint64 va0, pa0;
+  va0 = PGROUNDDOWN(dstva);
+  pa0 = walkaddr(pagetable, va0);
+
+  if(pa0 == 0) return -1;
+
+  __sync_synchronize();
+  __sync_lock_release((uint8*)(pa0 + (dstva - va0)));
+
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c.rej b/kernel/vm.c.rej
new file mode 100644
index 0000000..cecc3a7
--- /dev/null
+++ b/kernel/vm.c.rej
@@ -0,0 +1,55 @@
+diff a/kernel/vm.c b/kernel/vm.c	(rejected hunks)
+@@ -437,3 +437,52 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+     return -1;
+   }
+ }
++
++//Copy of uvmcopy with slight changes
++int
++uvmmirror(pagetable_t old, pagetable_t new,uint64 old_sz, uint64 new_sz)
++{
++  pte_t *pte;
++  uint64 pa, i;
++  uint flags;
++
++  for(i = PGROUNDUP(old_sz); i < PGROUNDUP(new_sz); i += PGSIZE){
++    if((pte = walk(old, i, 0)) == 0)
++      panic("uvmmirror: pte should exist");
++    if((*pte & PTE_V) == 0)
++      panic("uvmmirror: page not present");
++    pa = PTE2PA(*pte);
++    flags = PTE_FLAGS(*pte);
++
++    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
++      goto err;
++    }
++  }
++  return 0;
++
++ err:
++  uvmunmap(new, 0, i / PGSIZE, 1);
++  return -1;
++}
++
++//Copy of uvmfree with slight changes
++void thread_free(pagetable_t pagetable, uint64 sz){
++  if(sz > 0) uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
++  freewalk(pagetable);
++}
++
++//Copy of copyout with changes
++int
++copyoutV2(pagetable_t pagetable, uint64 dstva){
++
++  uint64 va0, pa0;
++  va0 = PGROUNDDOWN(dstva);
++  pa0 = walkaddr(pagetable, va0);
++
++  if(pa0 == 0) return -1;
++
++  __sync_synchronize();
++  __sync_lock_release((uint8*)(pa0 + (dstva - va0)));
++
++  return 0;
++}
+\ No newline at end of file
diff --git a/user/random.c b/user/random.c
new file mode 100644
index 0000000..5f49482
--- /dev/null
+++ b/user/random.c
@@ -0,0 +1,34 @@
+// from FreeBSD.
+int
+do_rand(unsigned long *ctx)
+{
+/*
+ * Compute x = (7^5 * x) mod (2^31 - 1)
+ * without overflowing 31 bits:
+ *      (2^31 - 1) = 127773 * (7^5) + 2836
+ * From "Random number generators: good ones are hard to find",
+ * Park and Miller, Communications of the ACM, vol. 31, no. 10,
+ * October 1988, p. 1195.
+ */
+    long hi, lo, x;
+
+    /* Transform to [1, 0x7ffffffe] range. */
+    x = (*ctx % 0x7ffffffe) + 1;
+    hi = x / 127773;
+    lo = x % 127773;
+    x = 16807 * lo - 2836 * hi;
+    if (x < 0)
+        x += 0x7fffffff;
+    /* Transform to [0, 0x7ffffffd] range. */
+    x--;
+    *ctx = x;
+    return (x);
+}
+
+unsigned long rand_next = 1;
+
+int
+rand(void)
+{
+    return (do_rand(&rand_next));
+}
\ No newline at end of file
diff --git a/user/thread_mutexlock.c b/user/thread_mutexlock.c
new file mode 100644
index 0000000..bd809ba
--- /dev/null
+++ b/user/thread_mutexlock.c
@@ -0,0 +1,24 @@
+#include "user/thread_mutexlock.h"
+#include "user/user.h"
+
+void
+thread_mutex_init(struct thread_mutexlock *lk, char *name){
+  lk->name = name;
+  lk->locked = 0;
+}
+
+void
+thread_mutex_lock(struct thread_mutexlock *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0) sleep(1);
+  __sync_synchronize();
+  lk->pid = getpid();
+}
+
+void
+thread_mutex_unlock(struct thread_mutexlock *lk)
+{
+  lk->pid = 0;
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/thread_mutexlock.h b/user/thread_mutexlock.h
new file mode 100644
index 0000000..1f854f1
--- /dev/null
+++ b/user/thread_mutexlock.h
@@ -0,0 +1,15 @@
+#ifndef TMUTEXLOCK
+#define TMUTEXLOCK
+
+#include "kernel/types.h"
+struct thread_mutexlock {
+  uint8 locked;
+  char *name;
+  int pid;
+};
+
+void thread_mutex_init(struct thread_mutexlock*, char*);
+void thread_mutex_lock(struct thread_mutexlock*);
+void thread_mutex_unlock(struct thread_mutexlock*);
+
+#endif
\ No newline at end of file
diff --git a/user/thread_spinlock.c b/user/thread_spinlock.c
new file mode 100644
index 0000000..b008fea
--- /dev/null
+++ b/user/thread_spinlock.c
@@ -0,0 +1,22 @@
+#include "user/thread_spinlock.h"
+#include "user/user.h"
+
+void
+thread_spin_init(struct thread_spinlock *lk, char *name){
+  lk->name = name;
+  lk->locked = 0;
+}
+
+void
+thread_spin_lock(struct thread_spinlock *lk){
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+  lk->pid = getpid();
+}
+
+void
+thread_spin_unlock(struct thread_spinlock *lk){
+  lk->pid = 0;
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..52101ee
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,16 @@
+#ifndef TSPINLOCK
+#define TSPINLOCK
+
+#include "kernel/types.h"
+
+struct thread_spinlock {
+  uint8 locked;
+  char *name;
+  int pid;
+};
+
+void thread_spin_init(struct thread_spinlock*, char*);
+void thread_spin_lock(struct thread_spinlock*);
+void thread_spin_unlock(struct thread_spinlock*);
+
+#endif
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..6bd86aa
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,81 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.c"
+#include "user/thread_mutexlock.c"
+
+struct balance
+{
+    char name[32];
+    int amount;
+};
+volatile int total_balance = 0;
+volatile unsigned int delay(unsigned int d)
+{
+    unsigned int i;
+    for (i = 0; i < d; i++)
+    {
+        __asm volatile("nop" ::
+                           :);
+    }
+    return i;
+}
+
+struct thread_spinlock lock;
+struct thread_mutexlock mlock;
+struct thread_mutexlock plock;
+
+void do_work(void *arg)
+{
+    int i;
+    int old;
+    struct balance *b = (struct balance *)arg;
+
+    thread_mutex_lock(&plock);
+    printf("Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&plock);
+
+    for (i = 0; i < b->amount; i++)
+    {
+        thread_mutex_lock(&plock);
+        //printf("%d %d\n", i,b->amount);
+        thread_mutex_unlock(&plock);
+        // lock and mlock will be implemented by you.
+        thread_spin_lock(&lock);
+        thread_mutex_lock(&mlock);
+        old = total_balance;
+        delay(100000);
+        total_balance = old + 1;
+        // if(old + 1 != total_balance) printf("we missed an update. old: %d total_balance: %d\n", old, total_balance);
+        thread_spin_unlock(&lock);
+        thread_mutex_unlock(&mlock);
+    }
+
+    thread_mutex_lock(&plock);
+    printf("Done s:%s\n", b->name);
+    thread_mutex_unlock(&plock);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[])
+{
+    thread_spin_init(&lock, "lock");
+    thread_mutex_init(&mlock,"mlock");
+    thread_mutex_init(&plock,"plock");
+
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+    void *s1, *s2;
+    int thread1, thread2, r1, r2;
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+    thread1 = thread_create(do_work, (void *)&b1, s1);
+    thread2 = thread_create(do_work, (void *)&b2, s2);
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+           thread1, r1, thread2, r2, total_balance);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..14d013c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+int thread_exit(void);
+int sleepV2(uint8*);
+int wakeupV2(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/user.h.rej b/user/user.h.rej
new file mode 100644
index 0000000..9831cbb
--- /dev/null
+++ b/user/user.h.rej
@@ -0,0 +1,13 @@
+diff a/user/user.h b/user/user.h	(rejected hunks)
+@@ -22,6 +22,11 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int thread_create(void(*fcn)(void*), void *arg, void*stack);
++int thread_join(int thread_id);
++int thread_exit(void);
++int sleepV2(uint8*);
++int wakeupV2(int);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..550a6fc 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+
diff --git a/user/usys.pl.rej b/user/usys.pl.rej
new file mode 100644
index 0000000..d71ddc8
--- /dev/null
+++ b/user/usys.pl.rej
@@ -0,0 +1,10 @@
+diff a/user/usys.pl b/user/usys.pl	(rejected hunks)
+@@ -36,3 +36,8 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("thread_create");
++entry("thread_join");
++entry("thread_exit");
++entry("sleepV2");
++entry("wakeupV2");
