diff --git a/Makefile b/Makefile
index 62fd0f8..5324f75 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testprocinfo\
+	$U/_dummyproc\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..b79b25d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -16,6 +16,9 @@ void            brelse(struct buf*);
 void            bwrite(struct buf*);
 void            bpin(struct buf*);
 void            bunpin(struct buf*);
+//added
+int             getpinfo(uint64);
+void            boost(void);
 
 // console.c
 void            consoleinit(void);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..db39280 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,9 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+
+#define TIME_LIMIT_0 2       // Time slice for queue 0 (Lottery Scheduling)
+#define TIME_LIMIT_1 4       // Time slice for queue 1 (Round-Robin)
+#define WAIT_THRESH 6        // Aging threshold to promote processes from queue 1 to queue 0
+#define DEFAULT_TICKETS 10   // Default tickets for lottery scheduling
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..5068dce 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,20 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
+#include "random.h"
+
+// Define ANSI color codes for log messages
+#define COLOR_RESET "\033[0m"
+#define COLOR_BLUE "\033[34m"
+#define COLOR_GREEN "\033[32m"
+#define COLOR_YELLOW "\033[33m"
+#define COLOR_CYAN "\033[36m"
+#define COLOR_MAGENTA "\033[35m"
+#define COLOR_RED "\033[31m"
+
+// Global variable to enable or disable logs
+int print_logs = 0; // Set to 0 to disable logging
 
 struct cpu cpus[NCPU];
 
@@ -14,6 +28,8 @@ struct proc *initproc;
 
 int nextpid = 1;
 struct spinlock pid_lock;
+struct spinlock ticket_lock;
+struct spinlock aging_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -29,40 +45,50 @@ struct spinlock wait_lock;
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
-void
-proc_mapstacks(pagetable_t kpgtbl)
+void proc_mapstacks(pagetable_t kpgtbl)
 {
   struct proc *p;
-  
-  for(p = proc; p < &proc[NPROC]; p++) {
+
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     char *pa = kalloc();
-    if(pa == 0)
+    if (pa == 0)
       panic("kalloc");
-    uint64 va = KSTACK((int) (p - proc));
+    uint64 va = KSTACK((int)(p - proc));
     kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
   }
 }
 
 // initialize the proc table.
-void
-procinit(void)
+void procinit(void)
 {
   struct proc *p;
-  
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
-  for(p = proc; p < &proc[NPROC]; p++) {
-      initlock(&p->lock, "proc");
-      p->state = UNUSED;
-      p->kstack = KSTACK((int) (p - proc));
+  initlock(&ticket_lock, "ticket_lock");
+  initlock(&aging_lock, "aging_lock"); // Added lock for aging
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    initlock(&p->lock, "proc");
+    p->state = UNUSED;
+    p->kstack = KSTACK((int)(p - proc));
+    p->original_tickets = DEFAULT_TICKETS;
+    p->remaining_tickets = DEFAULT_TICKETS;
+    p->current_time_slice = TIME_LIMIT_0;
+    p->total_used_slices = 0;
+    p->queue_num = 0;
+    p->waiting_time = 0;
+    p->running_time = 0;
+    p->queue_ticks[0] = 0;
+    p->queue_ticks[1] = 0;
   }
 }
 
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
-int
-cpuid()
+int cpuid()
 {
   int id = r_tp();
   return id;
@@ -70,7 +96,7 @@ cpuid()
 
 // Return this CPU's cpu struct.
 // Interrupts must be disabled.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int id = cpuid();
@@ -79,7 +105,7 @@ mycpu(void)
 }
 
 // Return the current struct proc *, or zero if none.
-struct proc*
+struct proc *
 myproc(void)
 {
   push_off();
@@ -89,11 +115,10 @@ myproc(void)
   return p;
 }
 
-int
-allocpid()
+int allocpid()
 {
   int pid;
-  
+
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -106,16 +131,20 @@ allocpid()
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     acquire(&p->lock);
-    if(p->state == UNUSED) {
+    if (p->state == UNUSED)
+    {
       goto found;
-    } else {
+    }
+    else
+    {
       release(&p->lock);
     }
   }
@@ -124,9 +153,19 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->original_tickets = DEFAULT_TICKETS;
+  p->remaining_tickets = DEFAULT_TICKETS;
+  p->current_time_slice = TIME_LIMIT_0;
+  p->total_used_slices = 0;
+  p->queue_num = 0;
+  p->waiting_time = 0;
+  p->running_time = 0;
+  p->queue_ticks[0] = 0;
+  p->queue_ticks[1] = 0;
 
   // Allocate a trapframe page.
-  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+  if ((p->trapframe = (struct trapframe *)kalloc()) == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -134,7 +173,8 @@ found:
 
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
-  if(p->pagetable == 0){
+  if (p->pagetable == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -155,10 +195,10 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if(p->trapframe)
-    kfree((void*)p->trapframe);
+  if (p->trapframe)
+    kfree((void *)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if (p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
@@ -180,23 +220,25 @@ proc_pagetable(struct proc *p)
 
   // An empty page table.
   pagetable = uvmcreate();
-  if(pagetable == 0)
+  if (pagetable == 0)
     return 0;
 
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
-  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
-              (uint64)trampoline, PTE_R | PTE_X) < 0){
+  if (mappages(pagetable, TRAMPOLINE, PGSIZE,
+               (uint64)trampoline, PTE_R | PTE_X) < 0)
+  {
     uvmfree(pagetable, 0);
     return 0;
   }
 
   // map the trapframe page just below the trampoline page, for
   // trampoline.S.
-  if(mappages(pagetable, TRAPFRAME, PGSIZE,
-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
+  if (mappages(pagetable, TRAPFRAME, PGSIZE,
+               (uint64)(p->trapframe), PTE_R | PTE_W) < 0)
+  {
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
     uvmfree(pagetable, 0);
     return 0;
@@ -207,8 +249,7 @@ proc_pagetable(struct proc *p)
 
 // Free a process's page table, and free the
 // physical memory it refers to.
-void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+void proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
@@ -219,32 +260,30 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
 uchar initcode[] = {
-  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
-  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
-  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
-  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
-  0x00, 0x00, 0x00, 0x00
-};
+    0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
+    0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
+    0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
+    0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00};
 
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
   struct proc *p;
-
+  initlock(&ticket_lock, "ticket_lock");
   p = allocproc();
   initproc = p;
-  
+
   // allocate one user page and copy initcode's instructions
   // and data into it.
   uvmfirst(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
   // prepare for the very first "return" from kernel to user.
-  p->trapframe->epc = 0;      // user program counter
-  p->trapframe->sp = PGSIZE;  // user stack pointer
+  p->trapframe->epc = 0;     // user program counter
+  p->trapframe->sp = PGSIZE; // user stack pointer
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -256,18 +295,21 @@ userinit(void)
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
 
   sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+  if (n > 0)
+  {
+    if ((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0)
+    {
       return -1;
     }
-  } else if(n < 0){
+  }
+  else if (n < 0)
+  {
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
@@ -276,20 +318,21 @@ growproc(int n)
 
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if (uvmcopy(p->pagetable, np->pagetable, p->sz) < 0)
+  {
     freeproc(np);
     release(&np->lock);
     return -1;
@@ -303,8 +346,8 @@ fork(void)
   np->trapframe->a0 = 0;
 
   // increment reference counts on open file descriptors.
-  for(i = 0; i < NOFILE; i++)
-    if(p->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
@@ -320,6 +363,8 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  np->original_tickets = p->original_tickets;
+  np->remaining_tickets = p->remaining_tickets;
   release(&np->lock);
 
   return pid;
@@ -327,13 +372,14 @@ fork(void)
 
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
-void
-reparent(struct proc *p)
+void reparent(struct proc *p)
 {
   struct proc *pp;
 
-  for(pp = proc; pp < &proc[NPROC]; pp++){
-    if(pp->parent == p){
+  for (pp = proc; pp < &proc[NPROC]; pp++)
+  {
+    if (pp->parent == p)
+    {
       pp->parent = initproc;
       wakeup(initproc);
     }
@@ -343,17 +389,18 @@ reparent(struct proc *p)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait().
-void
-exit(int status)
+void exit(int status)
 {
   struct proc *p = myproc();
 
-  if(p == initproc)
+  if (p == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(int fd = 0; fd < NOFILE; fd++){
-    if(p->ofile[fd]){
+  for (int fd = 0; fd < NOFILE; fd++)
+  {
+    if (p->ofile[fd])
+    {
       struct file *f = p->ofile[fd];
       fileclose(f);
       p->ofile[fd] = 0;
@@ -372,7 +419,7 @@ exit(int status)
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
-  
+
   acquire(&p->lock);
 
   p->xstate = status;
@@ -387,8 +434,7 @@ exit(int status)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(uint64 addr)
+int wait(uint64 addr)
 {
   struct proc *pp;
   int havekids, pid;
@@ -396,20 +442,25 @@ wait(uint64 addr)
 
   acquire(&wait_lock);
 
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(pp = proc; pp < &proc[NPROC]; pp++){
-      if(pp->parent == p){
+    for (pp = proc; pp < &proc[NPROC]; pp++)
+    {
+      if (pp->parent == p)
+      {
         // make sure the child isn't still in exit() or swtch().
         acquire(&pp->lock);
 
         havekids = 1;
-        if(pp->state == ZOMBIE){
+        if (pp->state == ZOMBIE)
+        {
           // Found one.
           pid = pp->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                  sizeof(pp->xstate)) < 0) {
+          if (addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                   sizeof(pp->xstate)) < 0)
+          {
             release(&pp->lock);
             release(&wait_lock);
             return -1;
@@ -424,13 +475,14 @@ wait(uint64 addr)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || killed(p)){
+    if (!havekids || killed(p))
+    {
       release(&wait_lock);
       return -1;
     }
-    
+
     // Wait for a child to exit.
-    sleep(p, &wait_lock);  //DOC: wait-sleep
+    sleep(p, &wait_lock); // DOC: wait-sleep
   }
 }
 
@@ -441,34 +493,213 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
-void
-scheduler(void)
+void scheduler(void)
 {
-  struct proc *p;
+  // struct proc *p;
   struct cpu *c = mycpu();
+  int round_robin_last = 0;
+  int total_tickets;
+  int random;
+  int got;
 
   c->proc = 0;
-  for(;;){
+  for (;;)
+  {
     // The most recent process to run may have had interrupts
     // turned off; enable them to avoid a deadlock if all
     // processes are waiting.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+    // for (p = proc; p < &proc[NPROC]; p++)
+    //{
+    // acquire(&p->lock);
+    // if (p->state == RUNNABLE)
+    // {
+    //  // Switch to chosen process.  It is the process's job
+    // // to release its lock and then reacquire it
+    //  // before jumping back to us.
+    // p->state = RUNNING;
+    // c->proc = p;
+    // swtch(&c->context, &p->context);
+
+    // // Process is done running for now.
+    // // It should have changed its p->state before coming back.
+    // c->proc = 0;
+    got = 0;
+    total_tickets = 0;
+    random = 0;
+    round_robin_last = (round_robin_last == NPROC - 1) ? 0 : round_robin_last % NPROC;
+
+    // Aging mechanism to promote long-waiting processes in queue 1
+    acquire(&aging_lock);
+    for (int i = 0; i < NPROC; i++)
+    {
+      acquire(&proc[i].lock);
+      if (proc[i].queue_num == 1 && proc[i].waiting_time >= WAIT_THRESH)
+      {
+        proc[i].queue_num = 0;
+        proc[i].waiting_time = 0;
+        //NEWLY ADDED
+        proc[i].remaining_tickets = proc[i].original_tickets;
+        //newly added
+        proc[i].running_time = 0;
+        if (print_logs)
+          printf(COLOR_GREEN "BOOST: Process %d waited for %d ticks, promoted to queue 0" COLOR_RESET "\n", proc[i].pid, WAIT_THRESH);
+      }
+      release(&proc[i].lock);
+    }
+    release(&aging_lock);
+
+    // Check queue 0 for runnable processes and calculate total tickets
+    acquire(&ticket_lock);
+    for (int i = 0; i < NPROC; i++)
+    {
+      acquire(&proc[i].lock);
+      if (proc[i].state == RUNNABLE && proc[i].queue_num == 0)
+      {
+        total_tickets += proc[i].remaining_tickets;
+        proc[i].waiting_time++; // Increment waiting time for queue 0 processes
+        got = 1;
+      }
+      release(&proc[i].lock);
+    }
+    if (total_tickets != 0)
+    {
+      // printf("Lottery\n");
+      // Perform lottery scheduling for queue 0
+      random = randomrange(1, total_tickets);
+      // if (print_logs)
+      //   printf("Total tickets %d, random number %d\n", total_tickets, random);
+      for (int i = 0; i < NPROC; i++)
+      {
+        acquire(&proc[i].lock);
+        // printf("%d is in %d state and has %d remaining tickets and in %d queue\n", proc[i].pid, proc[i].state, proc[i].remaining_tickets, proc[i].queue_num);
+
+        if (proc[i].state == RUNNABLE && proc[i].queue_num == 0)
+        {
+          random -= proc[i].remaining_tickets;
+          if (random <= 0)
+          {
+            // printf("Winner %d %s\n", proc[i].pid, proc[i].name);
+            proc[i].remaining_tickets--;
+            if (print_logs)
+              printf(COLOR_BLUE "LOTTERY: Process %d (%s) won in queue 0 with tickets %d" COLOR_RESET "\n", proc[i].pid, proc[i].name, proc[i].remaining_tickets + 1);
+            release(&ticket_lock);
+            // proc[i].current_time_slice = TIME_LIMIT_0;
+            proc[i].state = RUNNING;
+            c->proc = &proc[i];
+            proc[i].running_time++;    // Increment running time for queue 0
+            proc[i].times_scheduled++; // Count each time scheduled
+            proc[i].queue_ticks[0]++;  // Count ticks in queue 0
+
+            // printf("Lottery, %d\n", i);
+            swtch(&c->context, &proc[i].context);
+            c->proc = 0;
+            proc[i].current_time_slice--; // Decrement the time slice after running
+            random = -1;
+            // if (proc[i].state == RUNNABLE)
+            // if (proc[i].state == RUNNABLE && proc[i].current_time_slice >= TIME_LIMIT_0)
+            if (proc[i].current_time_slice <= 0)
+            {
+              proc[i].queue_num = 1;
+              proc[i].current_time_slice = TIME_LIMIT_1;
+              proc[i].waiting_time = 0; // Reset waiting time on demotion
+              proc[i].remaining_tickets = proc[i].original_tickets;
+              //newly added
+              proc[i].running_time = 0;
+              if (print_logs)
+                printf(COLOR_YELLOW "DEMO: Process %d ran for %d ticks, demoted to queue 1" COLOR_RESET "\n", proc[i].pid, TIME_LIMIT_0);
+            }
+            // random = -1; // Stop after finding a process
+            // increase the waiting time for all other processes
+            for (int j = 0; j < NPROC; j++)
+            {
+              if (proc[j].state == RUNNABLE && proc[j].queue_num == 0 && j != i)
+              {
+                acquire(&proc[j].lock);
+                proc[j].waiting_time++;
+                release(&proc[j].lock);
+              }
+            }
+          }
+        }
+        release(&proc[i].lock);
+        if (random == -1)
+        {
+          break;
+        }
+      }
+    }
+    else
+    {
+      // printf("Round Robin\n");
+      random = 0;
+      if (got == 1)
+      {
+        for (int i = 0; i < NPROC; i++)
+        {
+          acquire(&proc[i].lock);
+          if (proc[i].state == RUNNABLE && proc[i].queue_num == 0)
+          {
+            proc[i].remaining_tickets = proc[i].original_tickets;
+          }
+          release(&proc[i].lock);
+        }
+      }
+      release(&ticket_lock);
+      for (int i = round_robin_last; i < NPROC; i++)
+      {
+        acquire(&proc[i].lock);
+        if (proc[i].state == RUNNABLE && proc[i].queue_num == 1)
+        {
+          if (proc[i].current_time_slice <= 0)
+          {
+            proc[i].current_time_slice = TIME_LIMIT_1;
+          }
+          proc[i].times_scheduled++;
+          proc[i].queue_ticks[1]++; // Increment queue 1 ticks
+          proc[i].running_time++;   // Running time for queue 1
+          proc[i].state = RUNNING;
+          c->proc = &proc[i];
+          // printf("Round Robin, %d\n", i);
+          swtch(&c->context, &proc[i].context);
+          c->proc = 0;
+          proc[i].current_time_slice--; // Decrement the time slice for queue 1
+          random = -1;
+          if (proc[i].state == SLEEPING)
+          {
+            proc[i].queue_num = 0;
+            proc[i].waiting_time = 0; // Reset waiting time on demotion
+            proc[i].current_time_slice = TIME_LIMIT_0;
+            //newly added
+            proc[i].running_time = 0;
+            if (print_logs)
+              printf(COLOR_CYAN "PROMO: Process %d ran voluntarily, promoted to queue 0" COLOR_RESET "\n", proc[i].pid);
+          }
+          else if (proc[i].current_time_slice <= 0)
+          {
+            proc[i].current_time_slice = TIME_LIMIT_1; // Reset slice for queue 1
+          }
+        }
+        release(&proc[i].lock);
+        round_robin_last = i + 1;
+        // increase the waiting time for all other processes
+        for (int j = 0; j < NPROC; j++)
+        {
+
+          if (proc[j].state == RUNNABLE && proc[j].queue_num == 1 && j != i)
+          {
+            acquire(&proc[j].lock);
+            proc[j].waiting_time++;
+            release(&proc[j].lock);
+          }
+        }
+        if (random == -1)
+        {
+          break;
+        }
+        // release(&proc[i].lock);
       }
-      release(&p->lock);
     }
   }
 }
@@ -480,48 +711,71 @@ scheduler(void)
 // be proc->intena and proc->noff, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&p->lock))
+  if (!holding(&p->lock))
     panic("sched p->lock");
-  if(mycpu()->noff != 1)
+  if (mycpu()->noff != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(intr_get())
+  if (intr_get())
     panic("sched interruptible");
 
   intena = mycpu()->intena;
-  swtch(&p->context, &mycpu()->context);
+  //  swtch(&p->context, &mycpu()->context);
+
+  p->total_used_slices++;
+  if (p->state != RUNNABLE || p->current_time_slice <= 0)
+  {
+    swtch(&p->context, &mycpu()->context);
+  }
+  else
+  {
+    //printf("queue_num: %d\n", p->queue_num);  
+    p->state = RUNNING;
+  }
   mycpu()->intena = intena;
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
   p->state = RUNNABLE;
+  if (p->current_time_slice > 0 && p->queue_num == 1)
+  {
+    // If it voluntarily yields in queue 1, promote to queue 0
+    p->queue_num = 0;
+    p->current_time_slice = TIME_LIMIT_0;
+    p->running_time = 0;
+    p->waiting_time = 0;
+    if (print_logs)
+      printf(COLOR_MAGENTA "PROMO: Process %d voluntarily yielded in queue 1, promoted to queue 0" COLOR_RESET "\n", p->pid);
+  }
+  else
+  {
+    p->current_time_slice--;
+  }
   sched();
   release(&p->lock);
 }
 
 // A fork child's very first scheduling by scheduler()
 // will swtch to forkret.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
 
   // Still holding p->lock from scheduler.
   release(&myproc()->lock);
 
-  if (first) {
+  if (first)
+  {
     // File system initialization must be run in the context of a
     // regular process (e.g., because it calls sleep), and thus cannot
     // be run from main().
@@ -537,11 +791,10 @@ forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
@@ -549,13 +802,24 @@ sleep(void *chan, struct spinlock *lk)
   // (wakeup locks p->lock),
   // so it's okay to release lk.
 
-  acquire(&p->lock);  //DOC: sleeplock1
+  acquire(&p->lock); // DOC: sleeplock1
   release(lk);
 
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
 
+  if (p->current_time_slice > 0 && p->queue_num == 1)
+  {
+    p->queue_num = 0;
+    p->current_time_slice = TIME_LIMIT_0;
+    p->waiting_time = 0;
+    //newly added
+    p->running_time = 0;
+    if (print_logs)
+      printf(COLOR_RED "PROMO: Process %d slept voluntarily, promoted to queue 0" COLOR_RESET "\n", p->pid);
+  }
+
   sched();
 
   // Tidy up.
@@ -568,15 +832,17 @@ sleep(void *chan, struct spinlock *lk)
 
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
-    if(p != myproc()){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p != myproc())
+    {
       acquire(&p->lock);
-      if(p->state == SLEEPING && p->chan == chan) {
+      if (p->state == SLEEPING && p->chan == chan)
+      {
         p->state = RUNNABLE;
       }
       release(&p->lock);
@@ -587,16 +853,18 @@ wakeup(void *chan)
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     acquire(&p->lock);
-    if(p->pid == pid){
+    if (p->pid == pid)
+    {
       p->killed = 1;
-      if(p->state == SLEEPING){
+      if (p->state == SLEEPING)
+      {
         // Wake process from sleep().
         p->state = RUNNABLE;
       }
@@ -608,19 +876,17 @@ kill(int pid)
   return -1;
 }
 
-void
-setkilled(struct proc *p)
+void setkilled(struct proc *p)
 {
   acquire(&p->lock);
   p->killed = 1;
   release(&p->lock);
 }
 
-int
-killed(struct proc *p)
+int killed(struct proc *p)
 {
   int k;
-  
+
   acquire(&p->lock);
   k = p->killed;
   release(&p->lock);
@@ -630,13 +896,15 @@ killed(struct proc *p)
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
-int
-either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+int either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_dst){
+  if (user_dst)
+  {
     return copyout(p->pagetable, dst, src, len);
-  } else {
+  }
+  else
+  {
     memmove((char *)dst, src, len);
     return 0;
   }
@@ -645,14 +913,16 @@ either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 // Copy from either a user address, or kernel address,
 // depending on usr_src.
 // Returns 0 on success, -1 on error.
-int
-either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+int either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_src){
+  if (user_src)
+  {
     return copyin(p->pagetable, dst, src, len);
-  } else {
-    memmove(dst, (char*)src, len);
+  }
+  else
+  {
+    memmove(dst, (char *)src, len);
     return 0;
   }
 }
@@ -660,25 +930,24 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [USED]      "used",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [USED] "used",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   struct proc *p;
   char *state;
 
   printf("\n");
-  for(p = proc; p < &proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
@@ -686,3 +955,52 @@ procdump(void)
     printf("\n");
   }
 }
+
+int getpinfo(uint64 ps)
+{
+  struct pstat temp;
+  for (int i = 0; i < NPROC; i++)
+  {
+    acquire(&proc[i].lock);
+    temp.pid[i] = proc[i].pid;
+    if (proc[i].state == UNUSED)
+    {
+      temp.inuse[i] = 0;
+    }
+    else
+    {
+      temp.inuse[i] = 1;
+    }
+    temp.inQ[i] = proc[i].queue_num;
+    temp.tickets_original[i] = proc[i].original_tickets;
+    temp.tickets_current[i] = proc[i].remaining_tickets;
+    temp.times_scheduled[i] = proc[i].total_used_slices;
+    temp.running_time[i] = proc[i].running_time;
+    temp.waiting_time[i] = proc[i].waiting_time;
+    temp.queue_ticks[i][0] = proc[i].queue_ticks[0];
+    temp.queue_ticks[i][1] = proc[i].queue_ticks[1];
+    release(&proc[i].lock);
+  }
+
+  if (copyout(myproc()->pagetable, ps, (char *)&temp, sizeof(temp)) < 0)
+  {
+    return -1;
+  }
+  return 0;
+}
+/*
+void boost(void)
+{
+  for (int i = 0; i < NPROC; i++)
+  {
+    acquire(&proc[i].lock);
+    if (proc[i].queue_num == 1)
+    {
+      proc[i].queue_num = 0;
+      // printf("BOOST: Process %d waited for %d ticks, promoted to queue 0\n", proc[i].pid, WAIT_THRESH);
+    }
+    release(&proc[i].lock);
+  }
+  // printf("boosted\n");
+}
+*/
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c657765 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,5 +1,6 @@
 // Saved registers for kernel context switches.
-struct context {
+struct context
+{
   uint64 ra;
   uint64 sp;
 
@@ -19,11 +20,12 @@ struct context {
 };
 
 // Per-CPU state.
-struct cpu {
-  struct proc *proc;          // The process running on this cpu, or null.
-  struct context context;     // swtch() here to enter scheduler().
-  int noff;                   // Depth of push_off() nesting.
-  int intena;                 // Were interrupts enabled before push_off()?
+struct cpu
+{
+  struct proc *proc;      // The process running on this cpu, or null.
+  struct context context; // swtch() here to enter scheduler().
+  int noff;               // Depth of push_off() nesting.
+  int intena;             // Were interrupts enabled before push_off()?
 };
 
 extern struct cpu cpus[NCPU];
@@ -40,7 +42,8 @@ extern struct cpu cpus[NCPU];
 // the trapframe includes callee-saved user registers like s0-s11 because the
 // return-to-user path via usertrapret() doesn't return through
 // the entire kernel call stack.
-struct trapframe {
+struct trapframe
+{
   /*   0 */ uint64 kernel_satp;   // kernel page table
   /*   8 */ uint64 kernel_sp;     // top of process's kernel stack
   /*  16 */ uint64 kernel_trap;   // usertrap()
@@ -79,21 +82,30 @@ struct trapframe {
   /* 280 */ uint64 t6;
 };
 
-enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+enum procstate
+{
+  UNUSED,
+  USED,
+  SLEEPING,
+  RUNNABLE,
+  RUNNING,
+  ZOMBIE
+};
 
 // Per-process state
-struct proc {
+struct proc
+{
   struct spinlock lock;
 
   // p->lock must be held when using these:
-  enum procstate state;        // Process state
-  void *chan;                  // If non-zero, sleeping on chan
-  int killed;                  // If non-zero, have been killed
-  int xstate;                  // Exit status to be returned to parent's wait
-  int pid;                     // Process ID
+  enum procstate state; // Process state
+  void *chan;           // If non-zero, sleeping on chan
+  int killed;           // If non-zero, have been killed
+  int xstate;           // Exit status to be returned to parent's wait
+  int pid;              // Process ID
 
   // wait_lock must be held when using this:
-  struct proc *parent;         // Parent process
+  struct proc *parent; // Parent process
 
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
@@ -104,4 +116,15 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // need locking
+  int original_tickets;   // Original number of tickets
+  int remaining_tickets;  // Number of remaining tickets
+  int queue_num;          // Queue number
+  int current_time_slice; // Current time slice
+  int total_used_slices;  // Used time slices
+  int waiting_time;       // Ticks spent waiting
+  int running_time;       // Ticks spent running in current slice
+  int times_scheduled;    // Total times scheduled
+  uint queue_ticks[2];    // Ticks in each queue (q0, q1)
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..7e9318c
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,20 @@
+
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+    int pid[NPROC]; // the process ID of each process
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+    int inQ[NPROC]; //// which queue the process is currently in
+    int waiting_time[NPROC]; // the time each process has spent waiting before being scheduled
+    int running_time[NPROC]; //// Number of times the process was scheduled before its time slice was used
+    int times_scheduled[NPROC]; // the total number of times this process was scheduled
+    int tickets_original[NPROC];  // the number of tickets each process originally had
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+    uint queue_ticks[NPROC][2];  // the total number of ticks each process has spent in each queue
+};
+
+#endif // _PSTAT_H_
+
diff --git a/kernel/random.h b/kernel/random.h
new file mode 100644
index 0000000..001db44
--- /dev/null
+++ b/kernel/random.h
@@ -0,0 +1,33 @@
+// Taken from https://github.com/joonlim
+
+// Return a integer between 0 and ((2^32 - 1) / 2), which is 2147483647.
+uint
+random(void)
+{
+  // Take from http://stackoverflow.com/questions/1167253/implementation-of-rand
+  static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
+  unsigned int b;
+  b  = ((z1 << 6) ^ z1) >> 13;
+  z1 = ((z1 & 4294967294U) << 18) ^ b;
+  b  = ((z2 << 2) ^ z2) >> 27;
+  z2 = ((z2 & 4294967288U) << 2) ^ b;
+  b  = ((z3 << 13) ^ z3) >> 21;
+  z3 = ((z3 & 4294967280U) << 7) ^ b;
+  b  = ((z4 << 3) ^ z4) >> 12;
+  z4 = ((z4 & 4294967168U) << 13) ^ b;
+
+  return (z1 ^ z2 ^ z3 ^ z4) / 2;
+}
+
+// Return a random integer between a given range.
+int
+randomrange(int lo, int hi)
+{
+  if (hi < lo) {
+    int tmp = lo;
+    lo = hi;
+    hi = tmp;
+  }
+  int range = hi - lo + 1;
+  return random() % (range) + lo;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ce52e87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..ad70962 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,13 +6,15 @@
 #include "spinlock.h"
 #include "proc.h"
 
+extern struct spinlock ticket_lock;
+
 uint64
 sys_exit(void)
 {
   int n;
   argint(0, &n);
   exit(n);
-  return 0;  // not reached
+  return 0; // not reached
 }
 
 uint64
@@ -43,7 +45,7 @@ sys_sbrk(void)
 
   argint(0, &n);
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if (growproc(n) < 0)
     return -1;
   return addr;
 }
@@ -55,12 +57,14 @@ sys_sleep(void)
   uint ticks0;
 
   argint(0, &n);
-  if(n < 0)
+  if (n < 0)
     n = 0;
   acquire(&tickslock);
   ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(killed(myproc())){
+  while (ticks - ticks0 < n)
+  {
+    if (killed(myproc()))
+    {
       release(&tickslock);
       return -1;
     }
@@ -91,3 +95,43 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int n;
+  struct proc *p = myproc();
+  argint(0, &n);
+  if (n < 1)
+  {
+    acquire(&ticket_lock);
+    acquire(&p->lock);
+    p->original_tickets = DEFAULT_TICKETS;
+    p->remaining_tickets = DEFAULT_TICKETS;
+    release(&p->lock);
+    release(&ticket_lock);
+    return -1;
+  }
+  acquire(&ticket_lock);
+  acquire(&p->lock);
+  p->original_tickets = n;
+  p->remaining_tickets = n;
+  release(&p->lock);
+  release(&ticket_lock);
+  return 0;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  if (addr == 0)
+  {
+    return -1;
+  }
+  else
+  {
+    return getpinfo(addr);
+  }
+}
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..00409df
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,100 @@
+/*
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+    if(argc != 3) {
+        fprintf(2, "Usage: %s <ticket_number>\n", argv[0]);
+        exit(1);
+    }
+    int ticket = atoi(argv[1]);
+    settickets(ticket);
+    fork();
+    fork();
+    fork();
+    fork();
+    // for(int i=0; i<1000000; i++) {
+    //     for(int j=0; j<1000000; j++);
+    // }
+    for(int i=0; i<1000; i++){
+        for(int j=0; j<10000; j++);
+    }
+    exit(0);
+}
+*/
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void checkpid(int pid)
+{
+    if (pid < 0)
+    {
+        printf("Error creating child process\n");
+        exit(1);
+    }
+}
+void iterate(int iterations, int pid)
+{
+    if (pid == 0)
+    { // Child process
+        for (int i = 0; i < iterations; i++)
+        {
+            if (i % 1000 == 0)
+            {
+                // printf("Child going to sleep in iteration %d\n", i);
+                sleep(1); // Voluntarily give up CPU
+                // printf("Child woke up\n");
+            }
+        }
+        // printf("Child process finished\n");
+        exit(0);
+    }
+    else
+    { // Parent process
+        for (int i = 0; i < iterations; i++)
+        {
+            // Simulate work by looping
+        }
+        // printf("Parent process finished\n");
+        wait(0); // Wait for the child process to complete
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc != 3)
+    {
+        printf("Usage: dummyproc <tickets> <iterations>\n");
+        exit(1);
+    }
+
+    int tickets = atoi(argv[1]);
+    int iterations = atoi(argv[2]);
+
+    if (settickets(tickets) < 0)
+    {
+        printf("Error setting tickets\n");
+        exit(1);
+    }
+
+    int pid1 = fork();
+    checkpid(pid1);
+    iterate(iterations, pid1);
+    /*
+    int pid2 = fork();
+    iterate(iterations, pid2);
+    int pid3 = fork();
+    checkpid(pid3);
+    iterate(iterations, pid3);
+    int pid4 = fork();
+    checkpid(pid4);
+    iterate(iterations, pid4);
+    */
+
+    exit(0);
+}
+
+
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..af54967
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,45 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h"
+#include "kernel/param.h"
+#include "user/user.h"
+
+// Define ANSI color codes for log messages
+#define COLOR_RESET "\033[0m"
+#define COLOR_BLUE "\033[34m"
+#define COLOR_GREEN "\033[32m"
+#define COLOR_YELLOW "\033[33m"
+#define COLOR_CYAN "\033[36m"
+#define COLOR_MAGENTA "\033[35m"
+#define COLOR_RED "\033[31m"
+
+int main(int argc, char *argv[])
+{
+    struct pstat st;
+    if (getpinfo(&st) < 0) {
+        printf("Error: Failed to retrieve process information\n");
+        exit(1);
+    }
+
+    // Table header
+    printf(COLOR_GREEN"PID\t| In Use | inQ | Original Tickets | Current Tickets | Time Sheduled | Waiting Time | Running Time | Queue Ticks (Q0, Q1)"COLOR_RESET"\n");
+    printf(COLOR_BLUE"--------------------------------------------------------------------------------------------------------------------------"COLOR_RESET"\n");
+
+    // Process information display
+    for (int i = 0; i < NPROC; i++) {
+        if (st.inuse[i]) { // Display only active processes
+            printf(COLOR_YELLOW"%d\t|   %d    |  %d  |       %d        |       %d       |     %d      |      %d      |     %d     |     (%d, %d)"COLOR_RESET"\n",
+                st.pid[i],
+                st.inuse[i],
+                st.inQ[i],
+                st.tickets_original[i],
+                st.tickets_current[i],
+                st.times_scheduled[i],
+                st.waiting_time[i],
+                st.running_time[i],
+                st.queue_ticks[i][0],
+                st.queue_ticks[i][1]);
+        }
+    }
+    exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 04013ca..b000040 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
